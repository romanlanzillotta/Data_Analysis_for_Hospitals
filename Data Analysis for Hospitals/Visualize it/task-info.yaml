type: edu
custom_name: Visualize it!
files:
- name: analysis.py
  visible: true
  text: |+
    import pandas as pd
    import numpy as np

    pd.set_option('display.max_columns', 8)
    general = pd.read_csv("test/general.csv")
    prenatal = pd.read_csv("test/prenatal.csv")
    sports = pd.read_csv("test/sports.csv")

    prenatal.rename(columns={"HOSPITAL": "hospital", "Sex": "gender"}, inplace=True)
    sports.rename(columns={"Hospital": "hospital", "Male/female": "gender"}, inplace=True)

    data = pd.concat([general, prenatal, sports], ignore_index=True)
    data.drop(columns="Unnamed: 0", inplace=True)
    sample_data = data.sample(n=20, random_state=30)

    data.dropna(axis = 0, how = 'all', inplace = True) # remove rows with all NaNs
    # wrangling gender column:
    data['gender'].replace(['female', 'woman'], 'f', inplace=True)
    data['gender'].replace(['man', 'male'], 'm', inplace=True)
    cond = (data['gender'].isnull()) & (data['hospital'] == "prenatal")
    data.loc[cond, 'gender'] = "f"
    data.fillna(0, inplace=True) # fill the rest of the columns with zeros

    # questions
    answers = []
    #1. Which hospital has the highest number of patients?
    answers.append(data['hospital'].value_counts().idxmax())
    #2. What share of the patients in the general hospital suffers from stomach-related issues?
    # Round the result to the third decimal place.
    a2 = data.loc[data['hospital'] == 'general', ['hospital', 'diagnosis']].groupby("diagnosis").count()\
         / data.loc[data['hospital'] == 'general', 'diagnosis'].count()
    answers.append(a2.loc['stomach'][0].round(3))
    #3. What share of the patients in the sports hospital suffers from dislocation-related issues? Round the result to the third decimal place.
    a3 = data.loc[data['hospital'] == 'sports', ['hospital', 'diagnosis']].groupby("diagnosis").count()\
         / data.loc[data['hospital'] == 'sports', 'diagnosis'].count()
    answers.append(a3.loc['dislocation'][0].round(3))
    #4. What is the difference in the median ages of the patients in the general and sports hospitals?
    a4 = data.groupby('hospital').agg({'age': 'median'})
    answers.append(a4.loc['general'][0]-a4.loc['sports'][0].round(0))
    # After data processing at the previous stages, the blood_test column has three values: t = a blood test was taken,
    # f = a blood test wasn't taken, and 0 = there is no information. In which hospital the blood test was taken the most
    # often (there is the biggest number of t in the blood_test column among all the hospitals)?
    # How many blood tests were taken?
    a5 = data[['hospital', 'blood_test']].groupby('hospital', as_index=False).value_counts()
    answers.append(str(a5.loc[a5.blood_test == "t"].max()[0]) +", " +str(a5.loc[a5.blood_test == "t"].max()[2]) + " blood tests")
    numbers = ["1st", "2nd", "3rd","4th", "5th"]
    [print(f"The answer to the {numbers[i]} question is {answer}") for i, answer in enumerate(answers)]

  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: test/general.csv
  visible: false
  learner_created: false
- name: test/prenatal.csv
  visible: false
  learner_created: false
- name: test/sports.csv
  visible: false
  learner_created: false
- name: test/tests.py
  visible: false
  text: |
    import re
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    from hstest.check_result import CheckResult


    class EDATest(StageTest):
        def __init__(self, method: str):
            super().__init__(method)

            self.figures = []

            import matplotlib
            import matplotlib.pyplot as plt
            from matplotlib._pylab_helpers import Gcf
            matplotlib.use("agg")

            def custom_show_func(*args, **kwargs):
                managers = Gcf.get_all_fig_managers()
                for m in managers:
                    self.figures.append(m.canvas.figure)
                    Gcf.destroy(m.num)

            plt.show = custom_show_func

        def generate(self):
            return [
                TestCase()
            ]

        def check(self, reply, attach):
            if len(self.figures) == 0:
                return CheckResult.wrong(
                    'Looks like you didn\'t present plots using "plt.show()" command')

            if len(self.figures) != 3:
                return CheckResult.wrong(
                    'Looks like you didn\'t build all three plots using "plt.show()" command')

            lines = [line for line in reply.split('\n') if len(line) > 0]
            if len(lines) != 3:
                return CheckResult.wrong(
                    'You should output exactly 3 lines with answer to each question in each line. '
                    f'Found {len(lines)} lines')

            if 'answer' not in lines[0].lower() or 'question:' not in lines[0].lower()\
                    or 'answer' not in lines[1].lower() or 'question:' not in lines[1].lower():
                return CheckResult.wrong(
                    'Please follow the format of the answers given in the Example section')

            # 1st question
            answer_reply_str = lines[0].split('question:')[1]
            answer_reply_nums = re.findall(r'\d*\.\d+|\d+', answer_reply_str)
            if len(answer_reply_nums) != 2:
                return CheckResult.wrong(
                    'The answer to 1st question is incorrect. You should choose one of the age ranges given in the question')
            answer_reply_nums = list(map(float, answer_reply_nums))
            if len(set([15, 35]) & set(answer_reply_nums)) != 2:
                return CheckResult.wrong(
                    'The answer to the 1st question is incorrect')
            # 2nd question
            answer_reply_str = lines[1].split('question:')[1].replace(" ", "")
            if answer_reply_str != 'pregnancy':
                return CheckResult.wrong(f'Found "{answer_reply_str}", which is incorrect answer to the 2nd question')

            return CheckResult.correct()


    if __name__ == '__main__':
        EDATest('analysis').run_tests()
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from test.tests import EDATest

    if __name__ == '__main__':
        EDATest('analysis').run_tests()
  learner_created: false
- name: test/files.zip
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/152/stages/805/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Thu, 18 May 2023 01:24:00 UTC"
record: -1
